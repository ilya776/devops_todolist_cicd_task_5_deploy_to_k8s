name: Deploy to Kubernetes

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: 'Target environment (development, staging)'
      image-tag:
        required: true
        type: string
        description: 'Docker image tag to deploy'
      cluster-name:
        required: true
        type: string
        description: 'Kind cluster name'
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker
      uses: docker/setup-buildx-action@v3

    - name: Set up Kind
      uses: helm/kind-action@v1.8.0
      with:
        cluster_name: ${{ inputs.cluster-name }}
        config: cluster.yml
        wait: 300s

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Verify cluster
      run: |
        kubectl cluster-info
        kubectl get nodes

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Add Helm repositories
      run: |
        helm repo add stable https://charts.helm.sh/stable
        helm repo update

    - name: Install NGINX Ingress Controller
      run: |
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
        kubectl wait --namespace ingress-nginx \
          --for=condition=ready pod \
          --selector=app.kubernetes.io/component=controller \
          --timeout=300s

    - name: Prepare Helm values
      run: |
        # Extract image tag from the full image reference
        IMAGE_TAG=$(echo "${{ inputs.image-tag }}" | sed 's/.*://' | head -1)
        echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
        echo "Using image tag: ${IMAGE_TAG}"

        # Set values file based on environment
        if [ "${{ inputs.environment }}" = "staging" ]; then
          echo "VALUES_FILE=helm-charts/todoapp/values/stg.yaml" >> $GITHUB_ENV
        elif [ "${{ inputs.environment }}" = "development" ]; then
          echo "VALUES_FILE=helm-charts/todoapp/values/dev.yaml" >> $GITHUB_ENV
        else
          echo "VALUES_FILE=helm-charts/todoapp/values.yaml" >> $GITHUB_ENV
        fi
        echo "Using values file: ${VALUES_FILE}"

    - name: Update image repository in values
      run: |
        # Update the image repository with the DockerHub username
        sed -i "s|DOCKERHUB_USERNAME|${{ secrets.DOCKERHUB_USERNAME }}|g" helm-charts/todoapp/values.yaml
        sed -i "s|DOCKERHUB_USERNAME|${{ secrets.DOCKERHUB_USERNAME }}|g" helm-charts/todoapp/values/stg.yaml
        sed -i "s|DOCKERHUB_USERNAME|${{ secrets.DOCKERHUB_USERNAME }}|g" helm-charts/todoapp/values/dev.yaml

    - name: Helm dry-run
      run: |
        helm install todoapp-${{ inputs.environment }} helm-charts/todoapp \
          --values ${{ env.VALUES_FILE }} \
          --set todoapp.image.tag=${{ env.IMAGE_TAG }} \
          --namespace todoapp-${{ inputs.environment }} \
          --create-namespace \
          --dry-run \
          --debug

    - name: Deploy with Helm
      run: |
        helm upgrade --install todoapp-${{ inputs.environment }} helm-charts/todoapp \
          --values ${{ env.VALUES_FILE }} \
          --set todoapp.image.tag=${{ env.IMAGE_TAG }} \
          --namespace todoapp-${{ inputs.environment }} \
          --create-namespace \
          --atomic \
          --timeout=10m \
          --wait

    - name: Verify deployment
      run: |
        kubectl get pods -n todoapp-${{ inputs.environment }}
        kubectl get services -n todoapp-${{ inputs.environment }}
        kubectl get ingress -n todoapp-${{ inputs.environment }}

    - name: Wait for deployment to be ready
      run: |
        kubectl wait --for=condition=available --timeout=300s \
          deployment/todoapp -n todoapp-${{ inputs.environment }} || true

    - name: Get deployment status
      run: |
        echo "=== Deployment Status ==="
        kubectl get all -n todoapp-${{ inputs.environment }}
        echo "=== Pod Logs ==="
        kubectl logs -l app=todoapp -n todoapp-${{ inputs.environment }} --tail=50 || true
